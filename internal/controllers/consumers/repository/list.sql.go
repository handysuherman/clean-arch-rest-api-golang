// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: list.sql

package repository

import (
	"context"
	"database/sql"
)

const list = `-- name: List :many
SELECT id, nik, full_name, legal_name, birth_place, birth_date, salary, ktp_photo, selfie_photo, created_at, updated_at, updated_by, is_activated, is_activated_at, is_activated_updated_at FROM consumers WHERE full_name LIKE ? OR legal_name LIKE ?
ORDER BY created_at DESC
LIMIT ?
OFFSET ?
`

type ListParams struct {
	FullName  string         `json:"full_name"`
	LegalName sql.NullString `json:"legal_name"`
	Limit     int32          `json:"limit"`
	Offset    int32          `json:"offset"`
}

func (q *Queries) List(ctx context.Context, arg *ListParams) ([]*Consumer, error) {
	rows, err := q.db.QueryContext(ctx, list,
		arg.FullName,
		arg.LegalName,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Consumer{}
	for rows.Next() {
		var i Consumer
		if err := rows.Scan(
			&i.ID,
			&i.Nik,
			&i.FullName,
			&i.LegalName,
			&i.BirthPlace,
			&i.BirthDate,
			&i.Salary,
			&i.KtpPhoto,
			&i.SelfiePhoto,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.IsActivated,
			&i.IsActivatedAt,
			&i.IsActivatedUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
