// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Handysuherman",
            "url": "https://github.com/handysuherman",
            "email": "lireya95@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/consumer-transactions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "find list of consumer transactions with the provided request parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Consumer-Transactions"
                ],
                "summary": "find list of Consumer-Transactions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "customer_id, determine the customer id",
                        "name": "customer_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "search page_size, determine the size of page / limit",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "search page_id, determine the number page / offset",
                        "name": "page_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.SuccessResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/domain.ConsumerTransactionList"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new consumer transaction with the provided request parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Consumer-Transactions"
                ],
                "summary": "Create a new Consumer-Transaction",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.CreateConsumerTransactionDTORequestParams"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Optional idempotency key to ensure the request is only processed once",
                        "name": "x-idempotency-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created consumer transaction",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.SuccessResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/http.IDResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    }
                }
            }
        },
        "/consumer-transactions/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Find consumer transaction by associated id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Consumer-Transactions"
                ],
                "summary": "Find Consumer-Transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Any Associated id From your Source, this parameter is required",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.SuccessResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/domain.ConsumerTransaction"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an existing consumer transaction by the provided ID and request parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Consumer-Transactions"
                ],
                "summary": "Update an existing Consumer-Transaction by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the consumer transaction to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body for updating the consumer transaction",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.UpdateConsumerTransactionDTORequestParams"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Optional idempotency key to ensure the request is only processed once",
                        "name": "x-idempotency-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated consumer transaction",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.SuccessResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/http.IDResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    }
                }
            }
        },
        "/consumers": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "find list of consumers with the provided request parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Consumers"
                ],
                "summary": "find list of Consumers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "search q, determine either full_name or legal_name of the user",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "search page_size, determine the size of page / limit",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "search page_id, determine the number page / offset",
                        "name": "page_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.SuccessResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/domain.ConsumerList"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new consumer with the provided request parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Consumers"
                ],
                "summary": "Create a new Consumer",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.CreateConsumerDTORequestParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created consumer",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.SuccessResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/http.IDResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    }
                }
            }
        },
        "/consumers/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Find consumer by associated id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Consumers"
                ],
                "summary": "Find Consumer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Any Associated id From your Source, this parameter is required",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.SuccessResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/domain.Consumer"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an existing consumer by the provided ID and request parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Consumers"
                ],
                "summary": "Update an existing Consumer by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the consumer transaction to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body for updating the consumer",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.UpdateConsumerDTORequestParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated consumer transaction",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.SuccessResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/http.IDResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpError.RestError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Consumer": {
            "type": "object",
            "properties": {
                "birth_date": {
                    "type": "string"
                },
                "birth_place": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_activated": {
                    "type": "boolean"
                },
                "is_activated_at": {
                    "type": "string"
                },
                "is_activated_updated_at": {
                    "type": "string"
                },
                "ktp_photo": {
                    "type": "string"
                },
                "legal_name": {
                    "type": "string"
                },
                "nik": {
                    "type": "string"
                },
                "salary": {
                    "type": "string"
                },
                "selfie_photo": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "domain.ConsumerList": {
            "type": "object",
            "properties": {
                "has_next_page": {
                    "type": "boolean"
                },
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Consumer"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "domain.ConsumerTransaction": {
            "type": "object",
            "properties": {
                "admin_fee_amount": {
                    "type": "string"
                },
                "affiliated_dealer_id": {
                    "type": "integer"
                },
                "consumer_id": {
                    "type": "integer"
                },
                "contract_number": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "installment_amount": {
                    "type": "string"
                },
                "interest_rate": {
                    "type": "string"
                },
                "otr_amount": {
                    "type": "string"
                },
                "transaction_date": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "domain.ConsumerTransactionList": {
            "type": "object",
            "properties": {
                "has_next_page": {
                    "type": "boolean"
                },
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.ConsumerTransaction"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "domain.CreateConsumerDTORequestParams": {
            "type": "object",
            "required": [
                "full_name",
                "nik"
            ],
            "properties": {
                "birth_date": {
                    "type": "string"
                },
                "birth_place": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 5
                },
                "ktp_photo": {
                    "type": "string"
                },
                "legal_name": {
                    "type": "string"
                },
                "nik": {
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 0
                },
                "salary": {
                    "type": "number"
                },
                "selfie_photo": {
                    "type": "string"
                }
            }
        },
        "domain.CreateConsumerTransactionDTORequestParams": {
            "type": "object",
            "required": [
                "affiliated_dealer_id",
                "consumer_id"
            ],
            "properties": {
                "admin_fee_amount": {
                    "type": "string"
                },
                "affiliated_dealer_id": {
                    "type": "integer"
                },
                "consumer_id": {
                    "type": "integer"
                },
                "installment_amount": {
                    "type": "string"
                },
                "interest_rate": {
                    "type": "string"
                },
                "otr_amount": {
                    "type": "string"
                }
            }
        },
        "domain.UpdateConsumerDTORequestParams": {
            "type": "object",
            "properties": {
                "birth_date": {
                    "type": "string"
                },
                "birth_place": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "is_activated": {
                    "type": "boolean"
                },
                "ktp_photo": {
                    "type": "string"
                },
                "salary": {
                    "type": "number"
                },
                "selfie_photo": {
                    "type": "string"
                }
            }
        },
        "domain.UpdateConsumerTransactionDTORequestParams": {
            "type": "object",
            "properties": {
                "admin_fee_amount": {
                    "type": "string"
                },
                "installment_amount": {
                    "type": "string"
                },
                "interest_rate": {
                    "type": "string"
                },
                "otr_amount": {
                    "type": "string"
                }
            }
        },
        "http.IDResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "http.SuccessResponseDto": {
            "type": "object",
            "properties": {
                "data": {},
                "status": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "httpError.RestError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Forbidden"
                },
                "message": {},
                "status": {
                    "type": "integer",
                    "example": 403
                },
                "timestamp": {
                    "type": "integer",
                    "example": 1692753495
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "API key required to access the API",
            "type": "apiKey",
            "name": "x-api-key",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.1",
	Host:             "0.0.0.0:50050",
	BasePath:         "/api/v1/",
	Schemes:          []string{"http"},
	Title:            "Studi Kasus PT. XYZ Golang Developer",
	Description:      "API untuk Studi Kasus PT. XYZ Golang Developer",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
